/* You can add global styles to this file, and also import other style files */
html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
  box-sizing: border-box;
}
body {
  height: 100%;
  min-height: 100vh;
  padding-top: 70px;
  box-sizing: border-box;
  background: #303030;
}

.box {
  position: relative;
  top: 0;
  opacity: 1;
  float: left;
  padding: 60px 50px 40px 50px;
  width: 100%;
  border-radius: 10px;
  z-index: 5;
  max-width: 80vw;
  max-height: 80vh;
  &.back {
    transform: scale(0.95);
    -webkit-transform: scale(0.95);
    -ms-transform: scale(0.95);
    top: -20px;
    opacity: 0.8;
    z-index: -1;
  }
}

.box-wrapper {
  height: 100%;
  .example-form {
    min-width: 100%;
    max-width: 300px;
    width: 100%;
  }
  .example-full-width,
  .btn-block {
    width: 100%;
  }
  .mat-card {
    overflow: auto;
  }
  mat-card-header {
    text-align: center;
    width: 100%;
    display: block;
    mat-card-title {
      font-size: 30px;
      margin: 0;
    }
    .mat-stroked-button {
      border: 1px solid currentColor;
      line-height: 54px;
      background: #fff7fa;
    }
    .mat-form-field-appearance-legacy .mat-form-field-infix {
      padding: 0.8375em 0;
    }
  }
}

@mixin min($bp, $max: 'null', $device: 'screen') {
  @if $max == 'null' {
    @media only #{$device} and (min-width: #{$bp}) {
      @content;
    }
  } @else {
    @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
      @content;
    }
  }
}

@function bp($bp) {
  @return map-get($breakpoints, $bp);
}

$breakpoints: (
  na: 0px,
  // For BS grid
    xs: 320px,
  // Smartphone
    sm: 600px,
  // Tablets
    md: 900px,
  // Tablets Landscape and small desktops
    lg: 1200px,
  // Desktops
    xl: 1800px,
  // Large Desktop
);

@function container($container-size, $true-val: false) {
  @return map-get($container-sizes, $container-size);
}

$container-sizes: (
  sm: map-get($breakpoints, sm) - 100px,
  md: map-get($breakpoints, md) - 200px,
  lg: map-get($breakpoints, lg) - 500px,
  xl: map-get($breakpoints, xl) - 1000px
);

.container {
  padding-right: 1rem;
  padding-left: 1rem;

  &:not(.is-fluid) {
    margin: 0 auto;

    @each $bp, $container-size in $container-sizes {
      @include min(#{bp(#{$bp})}) {
        width: 100%;
        max-width: container(#{$bp});
      }
    }
  }
}

@each $bp, $container-size in $container-sizes {
  .container-#{$bp} {
    margin: 0 auto;
    padding-right: 1rem;
    padding-left: 1rem;
    width: 100%;

    $i: index($container-sizes, $bp $container-size);

    @for $j from $i through length($container-sizes) {
      @include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
        max-width: container(#{nth(nth($container-sizes, $j), 1)});
      }
    }
  }
}

.mat-progress-bar-buffer {
  background-color: #f8bbd0;
}
